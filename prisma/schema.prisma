// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  kindeId   String?   @unique
  bookings  Booking[]
  createdAt DateTime  @default(now())
}

model RoomType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  rooms       Room[]
}

model Room {
  id       Int       @id @default(autoincrement())
  number   String
  type     RoomType  @relation(fields: [typeId], references: [id])
  typeId   Int
  status   String
  bookings Booking[]
}

model SuiteType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  suites      Suite[]
}

model Suite {
  id       Int       @id @default(autoincrement())
  number   String
  type     SuiteType @relation(fields: [typeId], references: [id])
  typeId   Int
  status   String
  bookings Booking[]
}

model DiningVenue {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  tables      DiningTable[]
}

model DiningTable {
  id       Int         @id @default(autoincrement())
  number   String
  venue    DiningVenue @relation(fields: [venueId], references: [id])
  venueId  Int
  status   String
  bookings Booking[]
}

model EventType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  events      Event[]
}

model Event {
  id       Int       @id @default(autoincrement())
  type     EventType @relation(fields: [typeId], references: [id])
  typeId   Int
  date     DateTime
  status   String
  bookings Booking[]
}

model Booking {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  room          Room?        @relation(fields: [roomId], references: [id])
  roomId        Int?
  suite         Suite?       @relation(fields: [suiteId], references: [id])
  suiteId       Int?
  diningTable   DiningTable? @relation(fields: [diningTableId], references: [id])
  diningTableId Int?
  event         Event?       @relation(fields: [eventId], references: [id])
  eventId       Int?
  date          DateTime
  status        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
